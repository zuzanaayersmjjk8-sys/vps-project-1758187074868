name: Create VPS (Auto Restart)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

env:
  VPS_NAME: vps-project-1758187074868
  TMATE_SERVER: nyc1.tmate.io
  GITHUB_TOKEN_VPS: ${{ secrets.GH_TOKEN }}
  NGROK_SERVER_URL: https://vps-github.vercel.app

jobs:
  deploy:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: write

    steps:
    - name: ‚¨áÔ∏è Checkout source
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: üêç T·∫°o file VPS info
      run: |
        mkdir -Force links
        "VPS kh·ªüi t·∫°o - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" | Out-File -FilePath "links/vps-project-1758187074868.txt" -Encoding UTF8

    - name: üñ•Ô∏è C√†i ƒë·∫∑t v√† ch·∫°y TightVNC, noVNC, Cloudflared
      shell: pwsh
      run: |
        Write-Host "üì• Installing TightVNC, noVNC, and Cloudflared..."
        
        try {
          Write-Host "üì• Installing TightVNC..."
          Invoke-WebRequest -Uri "https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi" -OutFile "tightvnc-setup.msi" -TimeoutSec 60
          Write-Host "‚úÖ TightVNC downloaded"
          
          Start-Process msiexec.exe -Wait -ArgumentList '/i tightvnc-setup.msi /quiet /norestart ADDLOCAL="Server" SERVER_REGISTER_AS_SERVICE=1 SERVER_ADD_FIREWALL_EXCEPTION=1 SET_USEVNCAUTHENTICATION=1 VALUE_OF_USEVNCAUTHENTICATION=1 SET_PASSWORD=1 VALUE_OF_PASSWORD=thiendz SET_ACCEPTHTTPCONNECTIONS=1 VALUE_OF_ACCEPTHTTPCONNECTIONS=1 SET_ALLOWLOOPBACK=1 VALUE_OF_ALLOWLOOPBACK=1'
          Write-Host "‚úÖ TightVNC installed"
          
          Write-Host "üîß Enabling loopback connections in TightVNC registry..."
          Set-ItemProperty -Path "HKLM:\SOFTWARE\TightVNC\Server" -Name "AllowLoopback" -Value 1 -ErrorAction SilentlyContinue
          
          Write-Host "üîç Stopping any existing tvnserver processes..."
          Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue
          Stop-Service -Name "tvnserver" -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 5
          
          Write-Host "üîç Checking for port 5900 conflicts..."
          $portCheck = netstat -aon | FindStr :5900
          if ($portCheck) {
            Write-Host "‚ö†Ô∏è Port 5900 is already in use: $portCheck"
            Stop-Process -Id ($portCheck -split '\s+')[-1] -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 5
          }
          
          Write-Host "üöÄ Starting TightVNC server..."
          Start-Process -FilePath "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run -localhost no" -WindowStyle Hidden -RedirectStandardOutput "vnc_start.log" -RedirectStandardError "vnc_error.log"
          Start-Sleep -Seconds 40
          Get-Content "vnc_start.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
          
          netsh advfirewall firewall add rule name="Allow VNC 5900" dir=in action=allow protocol=TCP localport=5900
          netsh advfirewall firewall add rule name="Allow noVNC 6080" dir=in action=allow protocol=TCP localport=6080
          Write-Host "‚úÖ Firewall rules added"
          
          Write-Host "üì• Installing Python dependencies for noVNC and websockify..."
          Write-Host "üîç Checking Python and pip versions..."
          python --version | Write-Host
          python -m pip --version | Write-Host
          
          $maxPipAttempts = 5
          for ($i = 1; $i -le $maxPipAttempts; $i++) {
            try {
              python -m pip install --upgrade pip --timeout 60 2>&1 | Out-File -FilePath "pip_install.log" -Append -Encoding UTF8
              pip install --force-reinstall numpy novnc websockify==0.13.0 --timeout 60 2>&1 | Out-File -FilePath "pip_install.log" -Append -Encoding UTF8
              Write-Host "‚úÖ Python dependencies installed"
              break
            } catch {
              Write-Host "‚ö†Ô∏è Pip install attempt $i/$maxPipAttempts failed: $_"
              Get-Content "pip_install.log" -ErrorAction SilentlyContinue | Write-Host
              if ($i -eq $maxPipAttempts) {
                Write-Host "‚ùå Failed to install Python dependencies"
                exit 1
              }
              Start-Sleep -Seconds 10
            }
          }
          
          Write-Host "üîç Checking noVNC installation via pip..."
          try {
            $novncInfo = pip show novnc
            Write-Host "üìú noVNC package info:"
            Write-Host $novncInfo
            $novncPath = ($novncInfo | Select-String "Location: (.*)").Matches.Groups[1].Value + "\novnc"
            if (Test-Path "$novncPath") {
              dir $novncPath -Recurse | Write-Host
              if (-not (Test-Path "$novncPath/vnc.html")) {
                Write-Host "‚ùå noVNC directory is incomplete, vnc.html not found"
                Write-Host "üîÑ Falling back to GitHub download..."
                $novncVersion = "v1.6.0"
                $maxDownloadAttempts = 5
                for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
                  try {
                    Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."
                    Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue
                    $novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"
                    Write-Host "üîó Using URL: $novncUrl"
                    $response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru
                    Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"
                    Expand-Archive -Path "noVNC.zip" -DestinationPath "." -Force
                    Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force
                    Write-Host "‚úÖ noVNC downloaded and extracted"
                    $novncPath = "noVNC"
                    break
                  } catch {
                    Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"
                    if ($i -eq $maxDownloadAttempts) {
                      Write-Host "‚ùå Failed to download noVNC"
                      exit 1
                    }
                    Start-Sleep -Seconds 10
                  }
                }
              }
            } else {
              Write-Host "‚ùå noVNC directory does not exist, falling back to GitHub download..."
              $novncVersion = "v1.6.0"
              $maxDownloadAttempts = 5
              for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
                try {
                  Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."
                  Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue
                  $novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"
                  Write-Host "üîó Using URL: $novncUrl"
                  $response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru
                  Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"
                  Expand-Archive -Path "noVNC.zip" -DestinationPath "." -Force
                  Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force
                  Write-Host "‚úÖ noVNC downloaded and extracted"
                  $novncPath = "noVNC"
                  break
                } catch {
                  Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"
                  if ($i -eq $maxDownloadAttempts) {
                    Write-Host "‚ùå Failed to download noVNC"
                    exit 1
                  }
                  Start-Sleep -Seconds 10
                }
              }
            }
          } catch {
            Write-Host "‚ö†Ô∏è Failed to check noVNC package via pip, falling back to GitHub download..."
            $novncVersion = "v1.6.0"
            $maxDownloadAttempts = 5
            for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
              try {
                Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."
                Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue
                $novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"
                Write-Host "üîó Using URL: $novncUrl"
                $response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru
                Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"
                Expand-Archive -Path "noVNC.zip" -DestinationPath "." -Force
                Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force
                Write-Host "‚úÖ noVNC downloaded and extracted"
                $novncPath = "noVNC"
                break
              } catch {
                Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"
                if ($i -eq $maxDownloadAttempts) {
                  Write-Host "‚ùå Failed to download noVNC"
                  exit 1
                }
                Start-Sleep -Seconds 10
              }
            }
          }
          
          Write-Host "üîç Checking noVNC directory structure..."
          if (-not (Test-Path "$novncPath/vnc.html")) {
            Write-Host "‚ùå noVNC directory is incomplete, vnc.html not found"
            exit 1
          }
          
          Write-Host "üîç Checking for port 6080 conflicts..."
          $portCheck = netstat -aon | FindStr :6080
          if ($portCheck) {
            Write-Host "‚ö†Ô∏è Port 6080 is already in use: $portCheck"
            Stop-Process -Id ($portCheck -split '\s+')[-1] -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 5
          }
          
          Write-Host "üöÄ Starting websockify..."
          Start-Process -FilePath "python" -ArgumentList "-m", "websockify", "6080", "127.0.0.1:5900", "--web", "$novncPath", "--verbose" -RedirectStandardOutput "websockify.log" -RedirectStandardError "websockify_error.log" -NoNewWindow -PassThru
          Start-Sleep -Seconds 15
          Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
          
          Write-Host "üì• Installing Cloudflared..."
          Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe" -TimeoutSec 60
          Write-Host "‚úÖ Cloudflared downloaded"
          
          Write-Host "üåê Starting Cloudflared tunnel..."
          Start-Process -FilePath "cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:6080", "--no-autoupdate", "--edge-ip-version", "auto", "--protocol", "http2", "--logfile", "cloudflared.log" -WindowStyle Hidden
          Start-Sleep -Seconds 40
          Get-Content "cloudflared.log" -ErrorAction SilentlyContinue | Write-Host
          
          Write-Host "üöÄ Checking noVNC and retrieving Cloudflared URL..."
          
          Write-Host "üîç Checking for port 5900 and 6080 conflicts..."
          netstat -aon | FindStr :5900 | Write-Host
          netstat -aon | FindStr :6080 | Write-Host
          
          Write-Host "üîç Checking VNC and websockify processes..."
          Get-Process -Name "tvnserver" -ErrorAction SilentlyContinue | Format-Table -Property Name, Id, StartTime
          Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*websockify*" } | Format-Table -Property Name, Id, StartTime
          
          $vncReady = $false
          for ($i = 1; $i -le 30; $i++) {
            try {
              $tcpConnection = Test-NetConnection -ComputerName "localhost" -Port 5900 -WarningAction SilentlyContinue
              if ($tcpConnection.TcpTestSucceeded) {
                try {
                  $vncTest = New-Object System.Net.Sockets.TcpClient
                  $vncTest.Connect("127.0.0.1", 5900)
                  Write-Host "‚úÖ VNC server accepting connections"
                  $vncTest.Close()
                  $vncReady = $true
                  break
                } catch {
                  Write-Host "‚ùå VNC server not accepting connections: $_"
                  Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
                }
              }
            } catch {
              Write-Host "‚ö†Ô∏è VNC connection test failed: $_"
            }
            Write-Host "‚è≥ Waiting for VNC server... ($i/30)"
            
            if ($i % 10 -eq 0) {
              Write-Host "üîÑ Restarting VNC server..."
              Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              Start-Process -FilePath "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run -localhost no" -WindowStyle Hidden -RedirectStandardOutput "vnc_start.log" -RedirectStandardError "vnc_error.log"
              Start-Sleep -Seconds 40
              Get-Content "vnc_start.log" -ErrorAction SilentlyContinue | Write-Host
              Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
            }
            Start-Sleep -Seconds 2
          }
          
          if (-not $vncReady) {
            Write-Host "‚ùå VNC server not ready, exiting..."
            Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
            exit 1
          }
          
          $websockifyReady = $false
          for ($i = 1; $i -le 3; $i++) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:6080/vnc.html" -TimeoutSec 5 -UseBasicParsing -ErrorAction Stop
              Write-Host "‚úÖ noVNC web interface accessible"
              $websockifyReady = $true
              break
            } catch {
              Write-Host "‚ö†Ô∏è noVNC check failed (attempt $i/3): $_"
              Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
              Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
              Stop-Process -Name "python" -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              Start-Process -FilePath "python" -ArgumentList "-m", "websockify", "6080", "127.0.0.1:5900", "--web", "$novncPath", "--verbose" -RedirectStandardOutput "websockify.log" -RedirectStandardError "websockify_error.log" -NoNewWindow -PassThru
              Start-Sleep -Seconds 15
            }
          }
          
          if (-not $websockifyReady) {
            Write-Host "‚ùå Failed to start noVNC, exiting..."
            Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
            Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
            exit 1
          }
          
          Write-Host "üåê Retrieving Cloudflared URL..."
          $maxAttempts = 180
          $attempt = 0
          $cloudflaredUrl = ""
          
          do {
            $attempt++
            Write-Host "üîÑ Checking Cloudflared URL (attempt $attempt/$maxAttempts)"
            Start-Sleep -Seconds 3
            
            if (Test-Path "cloudflared.log") {
              try {
                $logContent = Get-Content "cloudflared.log" -Raw -ErrorAction SilentlyContinue
                if ($logContent -match 'https://[a-zA-Z0-9-]+\.trycloudflare\.com') {
                  $cloudflaredUrl = $matches[0]
                  Write-Host "‚úÖ Found Cloudflared URL: $cloudflaredUrl"
                  break
                }
              } catch {
                Write-Host "‚ö†Ô∏è Error reading cloudflared.log: $_"
              }
            }
            
            if ($attempt % 20 -eq 0) {
              Write-Host "üîÑ Restarting Cloudflared..."
              Stop-Process -Name "cloudflared" -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              Start-Process -FilePath "cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:6080", "--no-autoupdate", "--edge-ip-version", "auto", "--protocol", "http2", "--logfile", "cloudflared.log" -WindowStyle Hidden
              Start-Sleep -Seconds 40
              Get-Content "cloudflared.log" -ErrorAction SilentlyContinue | Write-Host
            }
          } while ($attempt -lt $maxAttempts)
          
          if ($cloudflaredUrl) {
            $remoteLink = "$cloudflaredUrl/vnc.html"
            Write-Host "üåå Remote VNC URL: $remoteLink"
            
            $remoteLink | Out-File -FilePath "remote-link.txt" -Encoding UTF8 -NoNewline
            
            try {
              git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git config --global user.name "github-actions[bot]"
              git add remote-link.txt
              git commit -m "üîó Updated remote-link.txt - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
              git push origin main --force-with-lease
              Write-Host "‚úÖ Remote link committed"
            } catch {
              Write-Host "‚ö†Ô∏è Failed to commit remote-link.txt: $_"
            }
            
            try {
              $body = @{ github_token = "$env:GITHUB_TOKEN_VPS"; vnc_link = $remoteLink } | ConvertTo-Json
              Invoke-RestMethod -Uri "https://vps-github.vercel.app/api/vpsuser" -Method Post -Body $body -ContentType "application/json" -TimeoutSec 20
              Write-Host "üì§ Remote VNC URL sent to server"
            } catch {
              Write-Host "‚ö†Ô∏è Failed to send remote VNC URL: $_"
            }
          } else {
            Write-Host "‚ùå Failed to retrieve Cloudflared URL"
            "TUNNEL_FAILED_$(Get-Date -Format 'yyyyMMdd_HHmmss')" | Out-File -FilePath "remote-link.txt" -Encoding UTF8 -NoNewline
            
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git add remote-link.txt
            git commit -m "‚ùå Tunnel failed - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
            git push origin main --force-with-lease
          }
        } catch {
          Write-Host "‚ö†Ô∏è Setup failed: $_"
          Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "pip_install.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "cloudflared.log" -ErrorAction SilentlyContinue | Write-Host
          exit 1
        }
        
        Write-Host "üöÄ VPS Session Started - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host "üåå Access noVNC via remote-link.txt URL (Password: hieudz)"
        
        mkdir -Force ".backup"
        
        $totalMinutes = 330
        $restartCheckpoint = 320
        $healthCheckInterval = 15
        $backupInterval = 60
        
        for ($i = 1; $i -le $totalMinutes; $i++) {
          $currentTime = Get-Date -Format 'HH:mm:ss'
          Write-Host "üü¢ VPS Running - Minute $i/$totalMinutes ($currentTime)"
          
          if ($i % $backupInterval -eq 0) {
            Write-Host "üíæ Creating backup at minute $i..."
            $filesToBackup = @()
            if (Test-Path "links") { $filesToBackup += "links" }
            if (Test-Path "remote-link.txt") { $filesToBackup += "remote-link.txt" }
            if (Test-Path "vnc_start.log") { $filesToBackup += "vnc_start.log" }
            if (Test-Path "vnc_error.log") { $filesToBackup += "vnc_error.log" }
            if (Test-Path "pip_install.log") { $filesToBackup += "pip_install.log" }
            if (Test-Path "websockify.log") { $filesToBackup += "websockify.log" }
            if (Test-Path "websockify_error.log") { $filesToBackup += "websockify_error.log" }
            if (Test-Path "cloudflared.log") { $filesToBackup += "cloudflared.log" }
            
            if ($filesToBackup.Count -gt 0) {
              try {
                $backupName = "vps-project-1758187074868_$(Get-Date -Format 'yyyyMMdd_HHmm').zip"
                Compress-Archive -Path $filesToBackup -DestinationPath ".backup/$backupName" -Force
                Write-Host "‚úÖ Backup created: $backupName"
                
                git add .backup/$backupName
                git commit -m "üíæ Backup - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
                git push origin main --force-with-lease
              } catch {
                Write-Host "‚ö†Ô∏è Backup failed: $_"
              }
            }
          }
          
          if ($i -eq $restartCheckpoint) {
            Write-Host "üîÅ Preparing restart in $($totalMinutes - $i) minutes..."
          }
          
          Start-Sleep -Seconds 60
        }
        
        Write-Host "‚è∞ VPS session completed. Preparing restart..."

        
        "RESTART_$(Get-Date -Format 'yyyyMMdd_HHmmss')" | Out-File -FilePath $lockFile -Encoding UTF8
        
        Write-Host "üîÅ Initiating workflow restart at $currentTime"
        
        try {
          Stop-Process -Name "cloudflared" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "python" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue
        } catch {
          Write-Host "‚ö†Ô∏è Process cleanup failed: $_"
        }
        
        Start-Sleep -Seconds 10
        
        try {
          $headers = @{ "Accept" = "application/vnd.github+json"; "Authorization" = "Bearer $env:GITHUB_TOKEN_VPS"; "Content-Type" = "application/json"; "X-GitHub-Api-Version" = "2022-11-28" }
          
          $payload = @{ event_type = "create-vps"; client_payload = @{ vps_name = "vps-project-1758187074868"; restart_time = $currentTime; auto_restart = $true } } | ConvertTo-Json -Depth 2
          
          Invoke-RestMethod -Uri "https://api.github.com/repos/zuzanaayersmjjk8-sys/vps-project-1758187074868/dispatches" -Method Post -Headers $headers -Body $payload -TimeoutSec 30
          Write-Host "‚úÖ Workflow restart triggered"
          
          git add $lockFile
          git commit -m "üîÑ Auto restart - $currentTime" --allow-empty
          git push origin main --force-with-lease
          
        } catch {
          Write-Host "‚ùå Restart failed: $_"
          Remove-Item $lockFile -Force -ErrorAction SilentlyContinue
          exit 1
        }
